1队列中很多流量，如何获取指定的部分流量？
解决方案：通过对mitmproxy的二次开发，我们增加了根据指定列表id的dump接口。
前端在列表选择的流量id，直接调用暴露的api接口，遍历获取到的id，自定义过滤获取指定的流量文件，同时解析流量数据并入库保存。
此时的流量文件保存路径也会入库，以便于后续回放任务指定流量文件。

2回放对比时，部分请求流量很大，对比起来很慢如何处理？
解决方案：通过全量对比返回数据的形式是不可取的，特别是流量数据大时，很容易造成前端界面的卡死。
这里我们通过对返回数据建立hash值的方式，直接对比2次的hash值来获得回放的对比结果，大大提高数据对比模块的性能。

3回放时如何让新的流量与老的录制流量进行关联？
解决方案：此种基于mitmproxy自身流量文件的回放方式，回放时的request流量序列id是不变的，
由于在生成流量用例时已经将老的流量返回值入库保存，后续回放时通过中间插件解析并根据id也对新的response流量进行保存，通过唯一的id进行了关联。

4流量回放时如何自定义去修改请求？
解决方案：这个功能平台目前没有开发实现，但是前期已经调研尝试过，可以过开发中间件脚本对流量进行自定义的编辑处理。