

1、repeated类型赋值问题
如果把上面所讲repeated类型例子中的Python代码改成如下形式，那么在运行时会报错：
audience=[{"name":"ASR","tier":"stand"},{"name":"TTS","tier":"free"},{"name":"MT","tier":"stand"}]
account=Account(account_id="account1")
account.audience=audience

错误信息：
AttributeError: Assignment not allowed to repeated field "name" in protocol message object.
这与我们上面所说的message的两种赋值方式似乎有所出入，但事实是因为protobuf中的repeated类型并不是我们想象的那样与python中的list完全对应，因此在这里会出现问题。所以在实际应用中，我们应避免这种写法，尽量采用上面例子中的方式。另外我们还可以采用另外一种方式来达到同样的效果：

audience=[{"name":"ASR","tier":"stand"},{"name":"TTS","tier":"free"},{"name":"MT","tier":"stand"}]
for audience1 in audience:
    a=account.audience.add()
    a.name=audience1['name']
    a.tier=audience1['tier']


2、复杂message的数据构造问题
在实际测试的接口中，有时某个message的结构可能会非常复杂，比如像语音识别服务一些接口，协议里包含很多不同的message和repeated类型，这样对于我们编写测试客户端代码以及构造case、解析case都会有一些影响。之前我们介绍过使用命令行的方式传递参数的方式显然难以满足这种情景下的需求，手动拼message的方式也显得十分不便。

经过一番调研发现，对于这种情况，我们可以使用protobuf库中json_format里面的Parse、MessageToJson两个方法来有效解决，这两个方法可以实现protobuf message和json的互转。因为处理json的方式有很多，也很灵活，因此我们在构造case时可以使用json的方式，通过Parse方法直接将json转换成message。在收到返回结果之后，可以使用MessageToJson方法将message转换成json，这样对于我们测试人员来说，发送和接收的数据看起来都是json，无论是准备测试数据还检验结果都会轻松不少。

示例：
from google.protobuf import json_format
json_obj='{"a1":1,"a2":2}'
request = json_format.Parse(json_obj,MessageName())
json_result = json_format.MessageToJson(request)
print (json_result)